// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repo.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/repo.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	domain "github.com/vskurikhin/gofavorites/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo[E domain.Entity] struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder[E]
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder[E domain.Entity] struct {
	mock *MockRepo[E]
}

// NewMockRepo creates a new mock instance.
func NewMockRepo[E domain.Entity](ctrl *gomock.Controller) *MockRepo[E] {
	mock := &MockRepo[E]{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo[E]) EXPECT() *MockRepoMockRecorder[E] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepo[E]) Delete(ctx context.Context, entity E, scan func(domain.Scanner)) (E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity, scan)
	ret0, _ := ret[0].(E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepoMockRecorder[E]) Delete(ctx, entity, scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepo[E])(nil).Delete), ctx, entity, scan)
}

// Get mocks base method.
func (m *MockRepo[E]) Get(ctx context.Context, entity E, scan func(domain.Scanner)) (E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, entity, scan)
	ret0, _ := ret[0].(E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepoMockRecorder[E]) Get(ctx, entity, scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepo[E])(nil).Get), ctx, entity, scan)
}

// GetByFilter mocks base method.
func (m *MockRepo[E]) GetByFilter(ctx context.Context, entity E, scan func(domain.Scanner) E) ([]E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, entity, scan)
	ret0, _ := ret[0].([]E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockRepoMockRecorder[E]) GetByFilter(ctx, entity, scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockRepo[E])(nil).GetByFilter), ctx, entity, scan)
}

// Insert mocks base method.
func (m *MockRepo[E]) Insert(ctx context.Context, entity E, scan func(domain.Scanner)) (E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, entity, scan)
	ret0, _ := ret[0].(E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepoMockRecorder[E]) Insert(ctx, entity, scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepo[E])(nil).Insert), ctx, entity, scan)
}

// Update mocks base method.
func (m *MockRepo[E]) Update(ctx context.Context, entity E, scan func(domain.Scanner)) (E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity, scan)
	ret0, _ := ret[0].(E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepoMockRecorder[E]) Update(ctx, entity, scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepo[E])(nil).Update), ctx, entity, scan)
}

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockScanner) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), dest...)
}
