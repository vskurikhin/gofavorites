// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/user_search_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/user_search_service.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/vskurikhin/gofavorites/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserSearchService is a mock of UserSearchService interface.
type MockUserSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockUserSearchServiceMockRecorder
}

// MockUserSearchServiceMockRecorder is the mock recorder for MockUserSearchService.
type MockUserSearchServiceMockRecorder struct {
	mock *MockUserSearchService
}

// NewMockUserSearchService creates a new mock instance.
func NewMockUserSearchService(ctrl *gomock.Controller) *MockUserSearchService {
	mock := &MockUserSearchService{ctrl: ctrl}
	mock.recorder = &MockUserSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSearchService) EXPECT() *MockUserSearchServiceMockRecorder {
	return m.recorder
}

// Lookup mocks base method.
func (m *MockUserSearchService) Lookup(ctx context.Context, user models.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", ctx, user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Lookup indicates an expected call of Lookup.
func (mr *MockUserSearchServiceMockRecorder) Lookup(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockUserSearchService)(nil).Lookup), ctx, user)
}
