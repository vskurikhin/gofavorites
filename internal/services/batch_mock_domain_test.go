// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/batch/batch.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/batch/batch.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	entity "github.com/vskurikhin/gofavorites/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFavoritesInsertsBatch is a mock of FavoritesInsertsBatch interface.
type MockFavoritesInsertsBatch struct {
	ctrl     *gomock.Controller
	recorder *MockFavoritesInsertsBatchMockRecorder
}

// MockFavoritesInsertsBatchMockRecorder is the mock recorder for MockFavoritesInsertsBatch.
type MockFavoritesInsertsBatchMockRecorder struct {
	mock *MockFavoritesInsertsBatch
}

// NewMockFavoritesInsertsBatch creates a new mock instance.
func NewMockFavoritesInsertsBatch(ctrl *gomock.Controller) *MockFavoritesInsertsBatch {
	mock := &MockFavoritesInsertsBatch{ctrl: ctrl}
	mock.recorder = &MockFavoritesInsertsBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoritesInsertsBatch) EXPECT() *MockFavoritesInsertsBatchMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockFavoritesInsertsBatch) Do(ctx context.Context, favorites []entity.Favorites, upk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, favorites, upk)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockFavoritesInsertsBatchMockRecorder) Do(ctx, favorites, upk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockFavoritesInsertsBatch)(nil).Do), ctx, favorites, upk)
}
