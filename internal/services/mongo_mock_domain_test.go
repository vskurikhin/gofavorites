// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/mongo/mongo.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/mongo/mongo.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	entity "github.com/vskurikhin/gofavorites/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMongo is a mock of Mongo interface.
type MockMongo struct {
	ctrl     *gomock.Controller
	recorder *MockMongoMockRecorder
}

// MockMongoMockRecorder is the mock recorder for MockMongo.
type MockMongoMockRecorder struct {
	mock *MockMongo
}

// NewMockMongo creates a new mock instance.
func NewMockMongo(ctrl *gomock.Controller) *MockMongo {
	mock := &MockMongo{ctrl: ctrl}
	mock.recorder = &MockMongoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongo) EXPECT() *MockMongoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMongo) Delete(ctx context.Context, entity entity.Favorites) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMongoMockRecorder) Delete(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMongo)(nil).Delete), ctx, entity)
}

// Load mocks base method.
func (m *MockMongo) Load(ctx context.Context, upk string) ([]entity.Favorites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, upk)
	ret0, _ := ret[0].([]entity.Favorites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockMongoMockRecorder) Load(ctx, upk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockMongo)(nil).Load), ctx, upk)
}

// MaxVersion mocks base method.
func (m *MockMongo) MaxVersion(ctx context.Context, upk string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxVersion", ctx, upk)
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxVersion indicates an expected call of MaxVersion.
func (mr *MockMongoMockRecorder) MaxVersion(ctx, upk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxVersion", reflect.TypeOf((*MockMongo)(nil).MaxVersion), ctx, upk)
}

// Save mocks base method.
func (m *MockMongo) Save(ctx context.Context, entity entity.Favorites) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMongoMockRecorder) Save(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMongo)(nil).Save), ctx, entity)
}
