// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/asset_search_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/asset_search_service.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAssetSearchService is a mock of AssetSearchService interface.
type MockAssetSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockAssetSearchServiceMockRecorder
}

// MockAssetSearchServiceMockRecorder is the mock recorder for MockAssetSearchService.
type MockAssetSearchServiceMockRecorder struct {
	mock *MockAssetSearchService
}

// NewMockAssetSearchService creates a new mock instance.
func NewMockAssetSearchService(ctrl *gomock.Controller) *MockAssetSearchService {
	mock := &MockAssetSearchService{ctrl: ctrl}
	mock.recorder = &MockAssetSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetSearchService) EXPECT() *MockAssetSearchServiceMockRecorder {
	return m.recorder
}

// Lookup mocks base method.
func (m *MockAssetSearchService) Lookup(ctx context.Context, isin string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", ctx, isin)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Lookup indicates an expected call of Lookup.
func (mr *MockAssetSearchServiceMockRecorder) Lookup(ctx, isin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockAssetSearchService)(nil).Lookup), ctx, isin)
}
