// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/upk_util_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/upk_util_service.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUpkUtilService is a mock of UpkUtilService interface.
type MockUpkUtilService struct {
	ctrl     *gomock.Controller
	recorder *MockUpkUtilServiceMockRecorder
}

// MockUpkUtilServiceMockRecorder is the mock recorder for MockUpkUtilService.
type MockUpkUtilServiceMockRecorder struct {
	mock *MockUpkUtilService
}

// NewMockUpkUtilService creates a new mock instance.
func NewMockUpkUtilService(ctrl *gomock.Controller) *MockUpkUtilService {
	mock := &MockUpkUtilService{ctrl: ctrl}
	mock.recorder = &MockUpkUtilServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpkUtilService) EXPECT() *MockUpkUtilServiceMockRecorder {
	return m.recorder
}

// DecryptAES mocks base method.
func (m *MockUpkUtilService) DecryptAES(bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptAES", bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptAES indicates an expected call of DecryptAES.
func (mr *MockUpkUtilServiceMockRecorder) DecryptAES(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptAES", reflect.TypeOf((*MockUpkUtilService)(nil).DecryptAES), bytes)
}

// DecryptRSA mocks base method.
func (m *MockUpkUtilService) DecryptRSA(bytes []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptRSA", bytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptRSA indicates an expected call of DecryptRSA.
func (mr *MockUpkUtilServiceMockRecorder) DecryptRSA(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptRSA", reflect.TypeOf((*MockUpkUtilService)(nil).DecryptRSA), bytes)
}

// EncryptAES mocks base method.
func (m *MockUpkUtilService) EncryptAES(plain []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptAES", plain)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptAES indicates an expected call of EncryptAES.
func (mr *MockUpkUtilServiceMockRecorder) EncryptAES(plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptAES", reflect.TypeOf((*MockUpkUtilService)(nil).EncryptAES), plain)
}

// EncryptPersonalKey mocks base method.
func (m *MockUpkUtilService) EncryptPersonalKey(personalKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPersonalKey", personalKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPersonalKey indicates an expected call of EncryptPersonalKey.
func (mr *MockUpkUtilServiceMockRecorder) EncryptPersonalKey(personalKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPersonalKey", reflect.TypeOf((*MockUpkUtilService)(nil).EncryptPersonalKey), personalKey)
}

// EncryptRSA mocks base method.
func (m *MockUpkUtilService) EncryptRSA(plain []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptRSA", plain)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptRSA indicates an expected call of EncryptRSA.
func (mr *MockUpkUtilServiceMockRecorder) EncryptRSA(plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptRSA", reflect.TypeOf((*MockUpkUtilService)(nil).EncryptRSA), plain)
}
