// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/transactional.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/transactional.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	domain "github.com/vskurikhin/gofavorites/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSuite is a mock of Suite interface.
type MockSuite struct {
	ctrl     *gomock.Controller
	recorder *MockSuiteMockRecorder
}

// MockSuiteMockRecorder is the mock recorder for MockSuite.
type MockSuiteMockRecorder struct {
	mock *MockSuite
}

// NewMockSuite creates a new mock instance.
func NewMockSuite(ctrl *gomock.Controller) *MockSuite {
	mock := &MockSuite{ctrl: ctrl}
	mock.recorder = &MockSuiteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuite) EXPECT() *MockSuiteMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockSuite) Copy() domain.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(domain.Entity)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockSuiteMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockSuite)(nil).Copy))
}

// DeleteArgs mocks base method.
func (m *MockSuite) DeleteArgs() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArgs")
	ret0, _ := ret[0].([]any)
	return ret0
}

// DeleteArgs indicates an expected call of DeleteArgs.
func (mr *MockSuiteMockRecorder) DeleteArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArgs", reflect.TypeOf((*MockSuite)(nil).DeleteArgs))
}

// DeleteSQL mocks base method.
func (m *MockSuite) DeleteSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// DeleteSQL indicates an expected call of DeleteSQL.
func (mr *MockSuiteMockRecorder) DeleteSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSQL", reflect.TypeOf((*MockSuite)(nil).DeleteSQL))
}

// DeleteTxArgs mocks base method.
func (m *MockSuite) DeleteTxArgs() domain.TxArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTxArgs")
	ret0, _ := ret[0].(domain.TxArgs)
	return ret0
}

// DeleteTxArgs indicates an expected call of DeleteTxArgs.
func (mr *MockSuiteMockRecorder) DeleteTxArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTxArgs", reflect.TypeOf((*MockSuite)(nil).DeleteTxArgs))
}

// FromJSON mocks base method.
func (m *MockSuite) FromJSON(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromJSON", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// FromJSON indicates an expected call of FromJSON.
func (mr *MockSuiteMockRecorder) FromJSON(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromJSON", reflect.TypeOf((*MockSuite)(nil).FromJSON), data)
}

// GetArgs mocks base method.
func (m *MockSuite) GetArgs() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgs")
	ret0, _ := ret[0].([]any)
	return ret0
}

// GetArgs indicates an expected call of GetArgs.
func (mr *MockSuiteMockRecorder) GetArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgs", reflect.TypeOf((*MockSuite)(nil).GetArgs))
}

// GetByFilterArgs mocks base method.
func (m *MockSuite) GetByFilterArgs() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilterArgs")
	ret0, _ := ret[0].([]any)
	return ret0
}

// GetByFilterArgs indicates an expected call of GetByFilterArgs.
func (mr *MockSuiteMockRecorder) GetByFilterArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilterArgs", reflect.TypeOf((*MockSuite)(nil).GetByFilterArgs))
}

// GetByFilterSQL mocks base method.
func (m *MockSuite) GetByFilterSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilterSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetByFilterSQL indicates an expected call of GetByFilterSQL.
func (mr *MockSuiteMockRecorder) GetByFilterSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilterSQL", reflect.TypeOf((*MockSuite)(nil).GetByFilterSQL))
}

// GetSQL mocks base method.
func (m *MockSuite) GetSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSQL indicates an expected call of GetSQL.
func (mr *MockSuiteMockRecorder) GetSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQL", reflect.TypeOf((*MockSuite)(nil).GetSQL))
}

// InsertArgs mocks base method.
func (m *MockSuite) InsertArgs() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArgs")
	ret0, _ := ret[0].([]any)
	return ret0
}

// InsertArgs indicates an expected call of InsertArgs.
func (mr *MockSuiteMockRecorder) InsertArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArgs", reflect.TypeOf((*MockSuite)(nil).InsertArgs))
}

// InsertSQL mocks base method.
func (m *MockSuite) InsertSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// InsertSQL indicates an expected call of InsertSQL.
func (mr *MockSuiteMockRecorder) InsertSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSQL", reflect.TypeOf((*MockSuite)(nil).InsertSQL))
}

// Key mocks base method.
func (m *MockSuite) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockSuiteMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockSuite)(nil).Key))
}

// ToJSON mocks base method.
func (m *MockSuite) ToJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJSON indicates an expected call of ToJSON.
func (mr *MockSuiteMockRecorder) ToJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJSON", reflect.TypeOf((*MockSuite)(nil).ToJSON))
}

// UpdateArgs mocks base method.
func (m *MockSuite) UpdateArgs() []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArgs")
	ret0, _ := ret[0].([]any)
	return ret0
}

// UpdateArgs indicates an expected call of UpdateArgs.
func (mr *MockSuiteMockRecorder) UpdateArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArgs", reflect.TypeOf((*MockSuite)(nil).UpdateArgs))
}

// UpdateSQL mocks base method.
func (m *MockSuite) UpdateSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// UpdateSQL indicates an expected call of UpdateSQL.
func (mr *MockSuiteMockRecorder) UpdateSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSQL", reflect.TypeOf((*MockSuite)(nil).UpdateSQL))
}

// UpsertTxArgs mocks base method.
func (m *MockSuite) UpsertTxArgs() domain.TxArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTxArgs")
	ret0, _ := ret[0].(domain.TxArgs)
	return ret0
}

// UpsertTxArgs indicates an expected call of UpsertTxArgs.
func (mr *MockSuiteMockRecorder) UpsertTxArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTxArgs", reflect.TypeOf((*MockSuite)(nil).UpsertTxArgs))
}

// MockDft is a mock of Dft interface.
type MockDft[S domain.Suite] struct {
	ctrl     *gomock.Controller
	recorder *MockDftMockRecorder[S]
}

// MockDftMockRecorder is the mock recorder for MockDft.
type MockDftMockRecorder[S domain.Suite] struct {
	mock *MockDft[S]
}

// NewMockDft creates a new mock instance.
func NewMockDft[S domain.Suite](ctrl *gomock.Controller) *MockDft[S] {
	mock := &MockDft[S]{ctrl: ctrl}
	mock.recorder = &MockDftMockRecorder[S]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDft[S]) EXPECT() *MockDftMockRecorder[S] {
	return m.recorder
}

// DoDelete mocks base method.
func (m *MockDft[S]) DoDelete(ctx context.Context, entity S, scan func(domain.Scanner)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDelete", ctx, entity, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDelete indicates an expected call of DoDelete.
func (mr *MockDftMockRecorder[S]) DoDelete(ctx, entity, scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDelete", reflect.TypeOf((*MockDft[S])(nil).DoDelete), ctx, entity, scan)
}

// DoUpsert mocks base method.
func (m *MockDft[S]) DoUpsert(ctx context.Context, entity S, scan func(domain.Scanner)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUpsert", ctx, entity, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoUpsert indicates an expected call of DoUpsert.
func (mr *MockDftMockRecorder[S]) DoUpsert(ctx, entity, scan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUpsert", reflect.TypeOf((*MockDft[S])(nil).DoUpsert), ctx, entity, scan)
}
