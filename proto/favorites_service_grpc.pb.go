// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/favorites_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FavoritesService_Get_FullMethodName        = "/proto.FavoritesService/Get"
	FavoritesService_GetForUser_FullMethodName = "/proto.FavoritesService/GetForUser"
	FavoritesService_Set_FullMethodName        = "/proto.FavoritesService/Set"
)

// FavoritesServiceClient is the client API for FavoritesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoritesServiceClient interface {
	Get(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesResponse, error)
	GetForUser(ctx context.Context, in *UserFavoritesRequest, opts ...grpc.CallOption) (*UserFavoritesResponse, error)
	Set(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesResponse, error)
}

type favoritesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoritesServiceClient(cc grpc.ClientConnInterface) FavoritesServiceClient {
	return &favoritesServiceClient{cc}
}

func (c *favoritesServiceClient) Get(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoritesResponse)
	err := c.cc.Invoke(ctx, FavoritesService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) GetForUser(ctx context.Context, in *UserFavoritesRequest, opts ...grpc.CallOption) (*UserFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFavoritesResponse)
	err := c.cc.Invoke(ctx, FavoritesService_GetForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoritesServiceClient) Set(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoritesResponse)
	err := c.cc.Invoke(ctx, FavoritesService_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoritesServiceServer is the server API for FavoritesService service.
// All implementations must embed UnimplementedFavoritesServiceServer
// for forward compatibility
type FavoritesServiceServer interface {
	Get(context.Context, *FavoritesRequest) (*FavoritesResponse, error)
	GetForUser(context.Context, *UserFavoritesRequest) (*UserFavoritesResponse, error)
	Set(context.Context, *FavoritesRequest) (*FavoritesResponse, error)
	mustEmbedUnimplementedFavoritesServiceServer()
}

// UnimplementedFavoritesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoritesServiceServer struct {
}

func (UnimplementedFavoritesServiceServer) Get(context.Context, *FavoritesRequest) (*FavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFavoritesServiceServer) GetForUser(context.Context, *UserFavoritesRequest) (*UserFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForUser not implemented")
}
func (UnimplementedFavoritesServiceServer) Set(context.Context, *FavoritesRequest) (*FavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedFavoritesServiceServer) mustEmbedUnimplementedFavoritesServiceServer() {}

// UnsafeFavoritesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoritesServiceServer will
// result in compilation errors.
type UnsafeFavoritesServiceServer interface {
	mustEmbedUnimplementedFavoritesServiceServer()
}

func RegisterFavoritesServiceServer(s grpc.ServiceRegistrar, srv FavoritesServiceServer) {
	s.RegisterService(&FavoritesService_ServiceDesc, srv)
}

func _FavoritesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoritesService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).Get(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_GetForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).GetForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoritesService_GetForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).GetForUser(ctx, req.(*UserFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoritesService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoritesServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoritesService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoritesServiceServer).Set(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoritesService_ServiceDesc is the grpc.ServiceDesc for FavoritesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoritesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FavoritesService",
	HandlerType: (*FavoritesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _FavoritesService_Get_Handler,
		},
		{
			MethodName: "GetForUser",
			Handler:    _FavoritesService_GetForUser_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _FavoritesService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/favorites_service.proto",
}
